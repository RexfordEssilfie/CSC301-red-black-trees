#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 116 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 163 129 240 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 75 102 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 157 157 250 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 58 157 250 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 58 157 250 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 212 140 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 43 63 0 0 0 -1
-1 2 36 #"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 43 63 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 0 0 0 -1 -1 0
42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 163 129 240
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 75 102 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 100 149 237
0 0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 50 205 50 0
0 0 -1 -1 0 1 #"\0"
0 75 6 #"Menlo\0"
0.0 17 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 116 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 142 28 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 36 36 140
255 255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 34 139 34
255 255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 93 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 190 190 190
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 185 220 113
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 155 255 155
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 116 116
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 18 67 155 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 30 70 190 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 135 185 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 176 208 208
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 116 116 255
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 125 255
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 143 15 223 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 141 19 5 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 244 194 71 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 127
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 86 86 86 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 255 255
0 31 31 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1           0 4809 0 18 3 13 #";#lang racket"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 7 #"require"
0 0 26 3 1 #" "
0 0 14 3 6 #"csc151"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 7 #"require"
0 0 26 3 1 #" "
0 0 14 3 12 #"racket/match"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 7 #"require"
0 0 26 3 1 #" "
0 0 14 3 15 #"dyoo-while-loop"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 9         691 23           0 0           0 114 0 14 3 8 #"Academic"
0 0 26 3 1 #" "
0 0 14 3 7 #"Honesty"
0 0 26 3 1 #" "
0 0 14 3 13 #"Certification"
0 0 26 29 1 #"\n"
0 0 26 3 1 #" "
0 0 14 3 7 #"Written"
0 0 26 3 1 #" "
0 0 14 3 7 #"sources"
0 0 26 3 1 #" "
0 0 14 3 5 #"used:"
0 0 26 29 1 #"\n"
0 0 26 3 2 #" ("
0 0 14 3 7 #"Include"
0 0 26 3 1 #" "
0 0 14 3 8 #"textbook"
0 0 26 3 1 #"("
0 0 14 3 1 #"s"
0 0 26 3 1 #")"
0 0 30 3 1 #","
0 0 26 3 1 #" "
0 0 14 3 8 #"complete"
0 0 26 3 1 #" "
0 0 14 3 9 #"citations"
0 0 26 3 1 #" "
0 0 16 3 3 #"for"
0 0 26 3 1 #" "
0 0 14 3 3 #"web"
0 0 26 3 1 #" "
0 0 14 3 2 #"or"
0 0 26 3 1 #" "
0 0 14 3 5 #"other"
0 0 26 3 1 #" "
0 0 14 3 7 #"written"
0 0 26 3 1 #" "
0 0 14 3 8 #"sources."
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 1 #" "
0 0 14 3 5 #"Write"
0 0 26 3 1 #" "
0 0 20 3 6 #"\"none\""
0 0 26 3 1 #" "
0 0 14 3 2 #"if"
0 0 26 3 1 #" "
0 0 14 3 2 #"no"
0 0 26 3 1 #" "
0 0 14 3 7 #"sources"
0 0 26 3 1 #" "
0 0 14 3 5 #"used."
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #" "
0 0 14 3 4 #"Help"
0 0 26 3 1 #" "
0 0 14 3 9 #"obtained:"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 2 #" ("
0 0 14 3 7 #"Include"
0 0 26 3 1 #" "
0 0 14 3 5 #"names"
0 0 26 3 1 #" "
0 0 14 3 2 #"of"
0 0 26 3 1 #" "
0 0 14 3 6 #"anyone"
0 0 26 3 1 #" "
0 0 14 3 5 #"other"
0 0 26 3 1 #" "
0 0 14 3 4 #"than"
0 0 26 3 1 #" "
0 0 14 3 3 #"the"
0 0 26 3 1 #" "
0 0 14 3 11 #"instructor."
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 14 3 3 #"Our"
0 0 26 3 1 #" "
0 0 14 3 7 #"written"
0 0 26 3 1 #" "
0 0 14 3 2 #"or"
0 0 26 3 1 #" "
0 0 14 3 5 #"typed"
0 0 26 3 1 #" "
0 0 14 3 10 #"signatures"
0 0 26 3 1 #" "
0 0 14 3 5 #"below"
0 0 26 3 1 #" "
0 0 14 3 8 #"confirms"
0 0 26 3 1 #" "
0 0 14 3 4 #"that"
0 0 26 3 1 #" "
0 0 14 3 3 #"the"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 14 3 5 #"above"
0 0 26 3 1 #" "
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 14 3 2 #"of"
0 0 26 3 1 #" "
0 0 14 3 7 #"sources"
0 0 26 3 1 #" "
0 0 14 3 2 #"is"
0 0 26 3 1 #" "
0 0 14 3 9 #"complete."
0 0 26 29 1 #"\n"
0 0 14 3 10 #"Signature:"
0 0 26 3 1 #" "
0           0 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 69
(4
 #"; +--------------+--------------------------------------------------"
 #"-"
) 0 0 26 29 1 #"\n"
0 0 18 3 18 #"; | Constructors |"
0 0 26 29 1 #"\n"
0 0 18 3 18 #"; +--------------+"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"struct"
0 0 26 3 1 #" "
0 0 14 3 4 #"tree"
0 0 26 3 2 #" ("
0 0 14 3 4 #"root"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 25 3 9 #"#:mutable"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;;; Procedure:"
0 0 26 29 1 #"\n"
0 0 18 3 10 #";;;   node"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;; Parameters:"
0 0 26 29 1 #"\n"
0 0 18 3 45 #";;;   val, a value (can assume it's a number)"
0 0 26 29 1 #"\n"
0 0 18 3 18 #";;;   left, a node"
0 0 26 29 1 #"\n"
0 0 18 3 19 #";;;   right, a node"
0 0 26 29 1 #"\n"
0 0 18 3 27 #";;;   color, 'red or 'black"
0 0 26 29 1 #"\n"
0 0 18 3 20 #";;;   parent, a node"
0 0 26 29 1 #"\n"
0 0 18 3 12 #";;; Purpose:"
0 0 26 29 1 #"\n"
0 0 18 3 44 #";;;   Create a red-node in a red black tree."
0 0 26 29 1 #"\n"
0 0 18 3 13 #";;; Produces:"
0 0 26 29 1 #"\n"
0 0 18 3 54 #";;;   a node, which acts as a part of a red-black tree"
0 0 26 29 1 #"\n"
0 0 18 3 18 #";;; Preconditions:"
0 0 26 29 1 #"\n"
0 0 18 3 21 #";;;   [No additional]"
0 0 26 29 1 #"\n"
0 0 18 3 19 #";;; Postconditions:"
0 0 26 29 1 #"\n"
0 0 18 3 38 #";;;   (node-left node) = left-subtree."
0 0 26 29 1 #"\n"
0 0 18 3 39 #";;;   (node-left node) = right-subtree."
0 0 26 29 1 #"\n"
0 0 18 3 66
#";;;   (node-val node) = val (the value you want the node to hold)."
0 0 26 29 1 #"\n"
0 0 18 3 48 #";;;   (node-color node) = the color of the node."
0 0 26 29 1 #"\n"
0 0 18 3 50 #";;;   (node-parent node) = the parent of the node."
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"struct"
0 0 26 3 1 #" "
0 0 14 3 4 #"node"
0 0 26 3 2 #" ("
0 0 14 3 3 #"val"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 14 #"              "
0 0 14 3 4 #"left"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 14 #"              "
0 0 14 3 5 #"right"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 14 #"              "
0 0 14 3 5 #"color"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 14 #"              "
0 0 14 3 6 #"parent"
0 0 26 3 2 #" )"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 0 25 3 9 #"#:mutable"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 14 #";;; Procedure:"
0 0 26 29 1 #"\n"
0 0 18 3 9 #";;;   nil"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;; Parameters:"
0 0 26 29 1 #"\n"
0 0 18 3 12 #";;;   [None]"
0 0 26 29 1 #"\n"
0 0 18 3 12 #";;; Purpose:"
0 0 26 29 1 #"\n"
0 0 18 3 44 #";;;   Create a nil node for a red-black tree"
0 0 26 29 1 #"\n"
0 0 18 3 72
(5
 #";;;   As CLRS describes, we use this to designate the bottom of the "
 #"tree"
) 0 0 26 29 1 #"\n"
0 0 18 3 13 #";;; Produces:"
0 0 26 29 1 #"\n"
0 0 18 3 16 #";;;   a nil node"
0 0 26 29 1 #"\n"
0 0 18 3 18 #";;; Preconditions:"
0 0 26 29 1 #"\n"
0 0 18 3 21 #";;;   [No additional]"
0 0 26 29 1 #"\n"
0 0 18 3 19 #";;; Postconditions:"
0 0 26 29 1 #"\n"
0 0 18 3 27 #";;;   (node-left nil) = nil"
0 0 26 29 1 #"\n"
0 0 18 3 27 #";;;   (node-left nil) = nil"
0 0 26 29 1 #"\n"
0 0 18 3 25 #";;;   (node-val nil) = #f"
0 0 26 29 1 #"\n"
0 0 18 3 31 #";;;   (node-color nil) = 'black"
0 0 26 29 1 #"\n"
0 0 18 3 29 #";;;   (node-parent nil) = nil"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 3 #"nil"
0 0 26 3 2 #" ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (["
0 0 14 3 1 #"v"
0 0 26 3 2 #" ("
0 0 14 3 4 #"node"
0 0 26 3 1 #" "
0 0 23 3 2 #"#f"
0 0 26 3 1 #" "
0 0 23 3 2 #"#f"
0 0 26 3 1 #" "
0 0 23 3 2 #"#f"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"black"
0 0 26 3 1 #" "
0 0 23 3 2 #"#f"
0 0 26 3 3 #")])"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 16 #"set-node-parent!"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 14 #"set-node-left!"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 15 #"set-node-right!"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"              "
0 0 14 3 1 #"v"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 69
(6
 #"; +------------+----------------------------------------------------"
 #"-"
) 0 0 26 29 1 #"\n"
0 0 18 3 16 #"; | Predicates |"
0 0 26 29 1 #"\n"
0 0 18 3 16 #"; +------------+"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 14 #";;; Procedure:"
0 0 26 29 1 #"\n"
0 0 18 3 10 #";;;   nil?"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;; Parameters:"
0 0 26 29 1 #"\n"
0 0 18 3 10 #";;;   node"
0 0 26 29 1 #"\n"
0 0 18 3 12 #";;; Purpose:"
0 0 26 29 1 #"\n"
0 0 18 3 53 #";;;   Tell us if we're at the distinguished nil node."
0 0 26 29 1 #"\n"
0 0 18 3 13 #";;; Produces:"
0 0 26 29 1 #"\n"
0 0 18 3 24 #";;;   is-nil?, a boolean"
0 0 26 29 1 #"\n"
0 0 18 3 18 #";;; Preconditions:"
0 0 26 29 1 #"\n"
0 0 18 3 21 #";;;   [No additional]"
0 0 26 29 1 #"\n"
0 0 18 3 19 #";;; Postconditions:"
0 0 26 29 1 #"\n"
0 0 18 3 21 #";;;   [No additional]"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 13 #"define-syntax"
0 0 26 3 2 #" ("
0 0 14 3 4 #"nil?"
0 0 26 3 1 #" "
0 0 14 3 3 #"stx"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 11 #"syntax-case"
0 0 26 3 1 #" "
0 0 14 3 3 #"stx"
0 0 26 3 3 #" ()"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 1 #"_"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 16 3 10 #"syntax/loc"
0 0 26 3 1 #" "
0 0 14 3 3 #"stx"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 3 #"nil"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    [("
0 0 14 3 1 #"_"
0 0 26 3 1 #" "
0 0 30 3 1 #"."
0 0 26 3 1 #" "
0 0 14 3 4 #"args"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 16 3 10 #"syntax/loc"
0 0 26 3 1 #" "
0 0 14 3 3 #"stx"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 9 #"nil?/proc"
0 0 26 3 1 #" "
0 0 30 3 1 #"."
0 0 26 3 1 #" "
0 0 14 3 4 #"args"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ["
0 0 14 3 1 #"_"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 14 3 11 #"identifier?"
0 0 26 3 1 #" "
0 0 14 3 3 #"stx"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"     "
0 0 23 3 2 #"#'"
0 0 14 3 9 #"nil?/proc"
0 0 26 3 3 #"]))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 14 #";;; Procedure:"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;;   red-node?"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;; Parameters:"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;;   n, a node"
0 0 26 29 1 #"\n"
0 0 18 3 12 #";;; Purpose:"
0 0 26 29 1 #"\n"
0 0 18 3 34 #";;;   Determine if n is a red node"
0 0 26 29 1 #"\n"
0 0 18 3 13 #";;; Produces:"
0 0 26 29 1 #"\n"
0 0 18 3 24 #";;;   is-red?, a Boolean"
0 0 26 29 1 #"\n"
0 0 18 3 18 #";;; Preconditions:"
0 0 26 29 1 #"\n"
0 0 18 3 22 #";;;   n must be a node"
0 0 26 29 1 #"\n"
0 0 18 3 19 #";;; Postconditions:"
0 0 26 29 1 #"\n"
0 0 18 3 37 #";;;   Returns true if n is a red node"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 9 #"red-node?"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-color"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 3 #"red"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 14 #";;; Procedure:"
0 0 26 29 1 #"\n"
0 0 18 3 17 #";;;   black-node?"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;; Parameters:"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;;   n, a node"
0 0 26 29 1 #"\n"
0 0 18 3 12 #";;; Purpose:"
0 0 26 29 1 #"\n"
0 0 18 3 36 #";;;   Determine if n is a black node"
0 0 26 29 1 #"\n"
0 0 18 3 13 #";;; Produces:"
0 0 26 29 1 #"\n"
0 0 18 3 26 #";;;   is-black?, a Boolean"
0 0 26 29 1 #"\n"
0 0 18 3 18 #";;; Preconditions:"
0 0 26 29 1 #"\n"
0 0 18 3 22 #";;;   n must be a node"
0 0 26 29 1 #"\n"
0 0 18 3 19 #";;; Postconditions:"
0 0 26 29 1 #"\n"
0 0 18 3 39 #";;;   Returns true if n is a black node"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 11 #"black-node?"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-color"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 5 #"black"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 14 #";;; Procedure:"
0 0 26 29 1 #"\n"
0 0 18 3 20 #";;;   tree-contains?"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;; Parameters:"
0 0 26 29 1 #"\n"
0 0 18 3 28 #";;;   tree, a red-black tree"
0 0 26 29 1 #"\n"
0 0 18 3 25 #";;;   val, a Scheme value"
0 0 26 29 1 #"\n"
0 0 18 3 12 #";;; Purpose:"
0 0 26 29 1 #"\n"
0 0 18 3 38 #";;;   Determine if val appears in tree"
0 0 26 29 1 #"\n"
0 0 18 3 13 #";;; Produces:"
0 0 26 29 1 #"\n"
0 0 18 3 32 #";;;   contains?, a Boolean value"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 14 #"tree-contains?"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"node"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (["
0 0 14 3 4 #"root"
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 1 #" "
0 0 14 3 4 #"node"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          )"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 4 #"nil?"
0 0 26 3 1 #" "
0 0 14 3 4 #"node"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 2 #"or"
0 0 26 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 26 3 1 #" "
0 0 14 3 4 #"root"
0 0 26 3 1 #" "
0 0 14 3 3 #"val"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 16 #"               ("
0 0 14 3 14 #"tree-contains?"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 4 #"node"
0 0 26 3 2 #") "
0 0 14 3 3 #"val"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 16 #"               ("
0 0 14 3 14 #"tree-contains?"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 4 #"node"
0 0 26 3 2 #") "
0 0 14 3 3 #"val"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    ))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 69 6 0 0 26 29 1 #"\n"
0 0 18 3 10 #"; | More |"
0 0 26 29 1 #"\n"
0 0 18 3 16 #"; +------------+"
0 0 26 29 1 #"\n"
0 0 18 3 14 #";;; Procedure:"
0 0 26 29 1 #"\n"
0 0 18 3 13 #";;;   minimum"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;; Parameters:"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;;   n, a node"
0 0 26 29 1 #"\n"
0 0 18 3 12 #";;; Purpose:"
0 0 26 29 1 #"\n"
0 0 18 3 60
#";;;   Looks for the minimum element of the tree rooted at n."
0 0 26 29 1 #"\n"
0 0 18 3 13 #";;; Produces:"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;;   n, a node"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 7 #"minimum"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 26 3 1 #" "
0 0 14 3 6 #"kernel"
0 0 26 3 3 #" (["
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 2 #"])"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 4 #"left"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 4 #"nil?"
0 0 26 3 1 #" "
0 0 14 3 4 #"left"
0 0 26 3 2 #") "
0 0 14 3 1 #"n"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 6 #"kernel"
0 0 26 3 1 #" "
0 0 14 3 4 #"left"
0 0 26 3 3 #")])"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    ))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 14 #";;; Procedure:"
0 0 26 29 1 #"\n"
0 0 18 3 13 #";;;   maximum"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;; Parameters:"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;;   n, a node"
0 0 26 29 1 #"\n"
0 0 18 3 12 #";;; Purpose:"
0 0 26 29 1 #"\n"
0 0 18 3 60
#";;;   Looks for the maximum element of the tree rooted at n."
0 0 26 29 1 #"\n"
0 0 18 3 13 #";;; Produces:"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;;   n, a node"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 7 #"maximum"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 3 #"let"
0 0 26 3 1 #" "
0 0 14 3 6 #"kernel"
0 0 26 3 3 #" (["
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 2 #"])"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 5 #"right"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 4 #"nil?"
0 0 26 3 1 #" "
0 0 14 3 5 #"right"
0 0 26 3 2 #") "
0 0 14 3 1 #"n"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 26 3 1 #"("
0 0 14 3 6 #"kernel"
0 0 26 3 1 #" "
0 0 14 3 5 #"right"
0 0 26 3 3 #")])"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    ))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 14 #";;; Procedure:"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;;   successor"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;; Parameters:"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;;   x, a node"
0 0 26 29 1 #"\n"
0 0 18 3 12 #";;; Purpose:"
0 0 26 29 1 #"\n"
0 0 18 3 44 #";;;   Returns the successor of x in the tree"
0 0 26 29 1 #"\n"
0 0 18 3 13 #";;; Produces:"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;;   n, a node"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 9 #"successor"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" [("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 4 #"nil?"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 7 #"minimum"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 16 3 3 #"let"
0 0 26 3 1 #" "
0 0 14 3 6 #"kernel"
0 0 26 3 3 #" (["
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 23 #"                      ["
0 0 14 3 1 #"y"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #")])"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"             [("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 4 #"nil?"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 4 #")) ("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 6 #"kernel"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ["
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 6 #"]))]))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 14 #";;; Procedure:"
0 0 26 29 1 #"\n"
0 0 18 3 18 #";;;   predeccessor"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;; Parameters:"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;;   x, a node"
0 0 26 29 1 #"\n"
0 0 18 3 12 #";;; Purpose:"
0 0 26 29 1 #"\n"
0 0 18 3 47 #";;;   Returns the predeccessor of x in the tree"
0 0 26 29 1 #"\n"
0 0 18 3 13 #";;; Produces:"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;;   n, a node"
0 0 26 29 1 #"\n"
0 0 18 3 18 #";;; Preconditions:"
0 0 26 29 1 #"\n"
0 0 18 3 3 #";;;"
0 0 26 29 1 #"\n"
0 0 18 3 19 #";;; Postconditions:"
0 0 26 29 1 #"\n"
0 0 18 3 53 #";;; If there is no predecessor, returns the nil node."
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 11 #"predecessor"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" [("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 4 #"nil?"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 7 #"maximum"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 16 3 3 #"let"
0 0 26 3 1 #" "
0 0 14 3 6 #"kernel"
0 0 26 3 3 #" (["
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 23 #"                      ["
0 0 14 3 1 #"y"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #")])"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"             [("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 4 #"nil?"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 4 #")) ("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 6 #"kernel"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"              "
0 0 14 3 1 #"y"
0 0 26 3 4 #"]))]"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"        ))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 70
(7
 #"; +---------------------+-------------------------------------------"
 #"--"
) 0 0 26 29 1 #"\n"
0 0 18 3 25 #"; | Your code goes here |"
0 0 26 29 1 #"\n"
0 0 18 3 25 #"; +---------------------+"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 14 #";;; Procedure:"
0 0 26 29 1 #"\n"
0 0 18 3 19 #";;;   rb-transplant"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;; Parameters:"
0 0 26 29 1 #"\n"
0 0 18 3 18 #";;;   Tree, a tree"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;;   u, a node"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;;   v, a node"
0 0 26 29 1 #"\n"
0 0 18 3 12 #";;; Purpose:"
0 0 26 29 1 #"\n"
0 0 18 3 6 #";;;   "
0 0 26 29 1 #"\n"
0 0 18 3 13 #";;; Produces:"
0 0 26 29 1 #"\n"
0 0 18 3 6 #";;;   "
0 0 26 29 1 #"\n"
0 0 18 3 18 #";;; Preconditions:"
0 0 26 29 1 #"\n"
0 0 18 3 6 #";;;   "
0 0 26 29 1 #"\n"
0 0 18 3 19 #";;; Postconditions:"
0 0 26 29 1 #"\n"
0 0 18 3 3 #";;;"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 14 #"rb-transplant!"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"Tree"
0 0 26 3 1 #" "
0 0 14 3 1 #"u"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 1 #"T"
0 0 26 3 2 #" ("
0 0 14 3 9 #"tree-root"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 4 #"nil?"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"u"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 14 #"set-tree-root!"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 26 3 1 #" "
0 0 14 3 1 #"u"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"u"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 14 #"set-node-left!"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"u"
0 0 26 3 2 #") "
0 0 14 3 1 #"v"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ]"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 15 #"set-node-right!"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"u"
0 0 26 3 2 #") "
0 0 14 3 1 #"v"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ]"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      )"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 16 #"set-node-parent!"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"u"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"   ))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 14 #";;; Procedure:"
0 0 26 29 1 #"\n"
0 0 18 3 21 #";;;   rb-insert-fixup"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;; Parameters:"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;;   x, a node"
0 0 26 29 1 #"\n"
0 0 18 3 18 #";;;   val, a value"
0 0 26 29 1 #"\n"
0 0 18 3 12 #";;; Purpose:"
0 0 26 29 1 #"\n"
0 0 18 3 6 #";;;   "
0 0 26 29 1 #"\n"
0 0 18 3 13 #";;; Produces:"
0 0 26 29 1 #"\n"
0 0 18 3 6 #";;;   "
0 0 26 29 1 #"\n"
0 0 18 3 18 #";;; Preconditions:"
0 0 26 29 1 #"\n"
0 0 18 3 6 #";;;   "
0 0 26 29 1 #"\n"
0 0 18 3 19 #";;; Postconditions:"
0 0 26 29 1 #"\n"
0 0 18 3 3 #";;;"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 16 #"rb-insert-fixup!"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"Tree"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"while"
0 0 26 3 2 #" ("
0 0 14 3 9 #"red-node?"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"             [("
0 0 14 3 6 #"equal?"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 3 #") ("
0 0 14 3 9 #"node-left"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 16 #"               ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 16 #"               ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                 [("
0 0 14 3 9 #"red-node?"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 5 #"black"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"black"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 3 #")) "
0 0 23 3 1 #"'"
0 0 14 3 3 #"red"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 18 #"                 ]"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 18 #"                 ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 22 #"                    [("
0 0 14 3 6 #"equal?"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 23 #"                      ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 23 #"                      ("
0 0 14 3 12 #"left-rotate!"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 22 #"                     ]"
0 0 26 29 1 #"\n"
0 0 26 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 23 3 2 #"#f"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 21 #"                    )"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 5 #"black"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 3 #"red"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ("
0 0 14 3 13 #"right-rotate!"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 18 #"                 ]"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                 )]"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 16 #"               ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 16 #"               ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                 [("
0 0 14 3 9 #"red-node?"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 5 #"black"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"black"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 3 #")) "
0 0 23 3 1 #"'"
0 0 14 3 3 #"red"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 18 #"                 ]"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 18 #"                 ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 22 #"                    [("
0 0 14 3 6 #"equal?"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 23 #"                      ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 23 #"                      ("
0 0 14 3 12 #"left-rotate!"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 22 #"                     ]"
0 0 26 29 1 #"\n"
0 0 26 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 23 3 2 #"#f"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 21 #"                    )"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 5 #"black"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 3 #"red"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ("
0 0 14 3 13 #"right-rotate!"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ]"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                 )]"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             )"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           )"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 1 #"T"
0 0 26 3 2 #" ("
0 0 14 3 9 #"tree-root"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 3 #")) "
0 0 18 3 34 #"; Gets the node at the tree's root"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 1 #" "
0 0 14 3 1 #"T"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"black"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    ))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 14 #";;; Procedure:"
0 0 26 29 1 #"\n"
0 0 18 3 16 #";;;   rb-insert!"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;; Parameters:"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;;   x, a node"
0 0 26 29 1 #"\n"
0 0 18 3 18 #";;;   val, a value"
0 0 26 29 1 #"\n"
0 0 18 3 12 #";;; Purpose:"
0 0 26 29 1 #"\n"
0 0 18 3 6 #";;;   "
0 0 26 29 1 #"\n"
0 0 18 3 13 #";;; Produces:"
0 0 26 29 1 #"\n"
0 0 18 3 6 #";;;   "
0 0 26 29 1 #"\n"
0 0 18 3 18 #";;; Preconditions:"
0 0 26 29 1 #"\n"
0 0 18 3 6 #";;;   "
0 0 26 29 1 #"\n"
0 0 18 3 19 #";;; Postconditions:"
0 0 26 29 1 #"\n"
0 0 18 3 3 #";;;"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 10 #"rb-insert!"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"Tree"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #" "
0 0 14 3 3 #"nil"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #" ("
0 0 14 3 9 #"tree-root"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 8 #"\"x is: \""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 8 #"\"y is: \""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 8 #"\"z is: \""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"while"
0 0 26 3 2 #" ("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 4 #"nil?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 19 #"\"before --> y is: \""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 18 #"\"after --> y is: \""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 14 #"\"x right is: \""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 13 #"\"x left is: \""
0 0 26 3 3 #"  ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 6 #"before"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 1 #"x"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #"<"
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 3 #") ("
0 0 14 3 8 #"node-val"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 16 #"               ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 16 #"               ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 16 #"               )"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 5 #"after"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 1 #"x"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        )"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 29 #"\"before --> parent of z is: \""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 16 #"set-node-parent!"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 28 #"\"after --> parent of z is: \""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 4 #"nil?"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 17 #"\"Entering Cond 1\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 8 #"\"before "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 1 #"T"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 9 #"tree-root"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 14 #"set-tree-root!"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 7 #"\"after "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 1 #"T"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 9 #"tree-root"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ]"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 1 #"<"
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 3 #") ("
0 0 14 3 8 #"node-val"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 17 #"\"Entering Cond 2\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"       "
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 11 #"\"before -->"
0 0 20 3 16 #" left of y is: \""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 14 #"set-node-left!"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 26 #"\"after --> left of y is: \""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ]"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 17 #"\"Entering Cond 3\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 28 #"\"before --> right of y is: \""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 15 #"set-node-right!"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 28 #"\"before --> right of y is: \""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ]"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      )"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 18 3 25 #"; Set z's children to nil"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 14 #"set-node-left!"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 1 #" "
0 0 14 3 3 #"nil"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 15 #"set-node-right!"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 1 #" "
0 0 14 3 3 #"nil"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 3 #"red"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 16 #"rb-insert-fixup!"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    ))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 15 #"; TEST THISSSSS"
0 0 26 29 1 #"\n"
0 0 18 3 14 #";;; Procedure:"
0 0 26 29 1 #"\n"
0 0 18 3 16 #";;;   rb-delete!"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;; Parameters:"
0 0 26 29 1 #"\n"
0 0 18 3 18 #";;;   Tree, a tree"
0 0 26 29 1 #"\n"
0 0 18 3 16 #";;;   z, a value"
0 0 26 29 1 #"\n"
0 0 18 3 12 #";;; Purpose:"
0 0 26 29 1 #"\n"
0 0 18 3 6 #";;;   "
0 0 26 29 1 #"\n"
0 0 18 3 13 #";;; Produces:"
0 0 26 29 1 #"\n"
0 0 18 3 6 #";;;   "
0 0 26 29 1 #"\n"
0 0 18 3 18 #";;; Preconditions:"
0 0 26 29 1 #"\n"
0 0 18 3 6 #";;;   "
0 0 26 29 1 #"\n"
0 0 18 3 19 #";;; Postconditions:"
0 0 26 29 1 #"\n"
0 0 18 3 3 #";;;"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 16 #"rb-delete-fixup!"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 2 #"la"
0 0 16 3 4 #"mbda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"Tree"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 5 #"while"
0 0 26 3 2 #" ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 4 #"nil?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 4 #")) ("
0 0 14 3 11 #"black-node?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 22 #"                    [("
0 0 14 3 6 #"equal?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 22 #"                     ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 22 #"                     ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                       [("
0 0 14 3 9 #"red-node?"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"black"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 3 #"red"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 12 #"left-rotate!"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ]"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                       [("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 26 3 2 #" ("
0 0 14 3 11 #"black-node?"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 5 #"))) ("
0 0 14 3 11 #"black-node?"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 3 #"red"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 24 #"                       ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 11 #"black-node?"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 29 #"                            ("
0 0 16 3 5 #"begin"
0 0 26 29 1 #"\n"
0 0 26 3 31 #"                              ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 5 #"black"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 31 #"                              ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 3 #"red"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 31 #"                              ("
0 0 14 3 13 #"right-rotate!"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 31 #"                              ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 31 #"                              )"
0 0 26 29 1 #"\n"
0 0 26 3 28 #"                            "
0 0 23 3 2 #"#f"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-color"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 5 #"black"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 5 #"black"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 12 #"left-rotate!"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #" ("
0 0 14 3 9 #"tree-root"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 27 #"                         ])"
0 0 26 29 1 #"\n"
0 0 26 3 22 #"                     ]"
0 0 26 29 1 #"\n"
0 0 26 3 21 #"                    ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 22 #"                     ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 22 #"                     ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                       [("
0 0 14 3 9 #"red-node?"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"black"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 3 #"red"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 12 #"left-rotate!"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ]"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                       [("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 26 3 2 #" ("
0 0 14 3 11 #"black-node?"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 5 #"))) ("
0 0 14 3 11 #"black-node?"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 3 #"red"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 24 #"                       ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 11 #"black-node?"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 29 #"                            ("
0 0 16 3 5 #"begin"
0 0 26 29 1 #"\n"
0 0 26 3 31 #"                              ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 5 #"black"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 31 #"                              ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 3 #"red"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 31 #"                              ("
0 0 14 3 13 #"right-rotate!"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 31 #"                              ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 31 #"                              )"
0 0 26 29 1 #"\n"
0 0 26 3 28 #"                            "
0 0 23 3 2 #"#f"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-color"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 5 #"black"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"w"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 14 3 5 #"black"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 12 #"left-rotate!"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #" ("
0 0 14 3 9 #"tree-root"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 27 #"                         ])"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 23 #"                     ])"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  )"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"black"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"  ))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 15 #"; TEST THISSSSS"
0 0 26 29 1 #"\n"
0 0 18 3 14 #";;; Procedure:"
0 0 26 29 1 #"\n"
0 0 18 3 16 #";;;   rb-delete!"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;; Parameters:"
0 0 26 29 1 #"\n"
0 0 18 3 18 #";;;   Tree, a tree"
0 0 26 29 1 #"\n"
0 0 18 3 16 #";;;   z, a value"
0 0 26 29 1 #"\n"
0 0 18 3 12 #";;; Purpose:"
0 0 26 29 1 #"\n"
0 0 18 3 6 #";;;   "
0 0 26 29 1 #"\n"
0 0 18 3 13 #";;; Produces:"
0 0 26 29 1 #"\n"
0 0 18 3 6 #";;;   "
0 0 26 29 1 #"\n"
0 0 18 3 18 #";;; Preconditions:"
0 0 26 29 1 #"\n"
0 0 18 3 6 #";;;   "
0 0 26 29 1 #"\n"
0 0 18 3 19 #";;; Postconditions:"
0 0 26 29 1 #"\n"
0 0 18 3 3 #";;;"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 10 #"rb-delete!"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"Tree"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 3 #"nil"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 16 #"y-original-color"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-color"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 4 #"nil?"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 14 #"rb-transplant!"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 4 #"nil?"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 14 #"rb-transplant!"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ]"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #" ("
0 0 14 3 7 #"minimum"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 16 #"y-original-color"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-color"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 3 #")) "
0 0 18 3 32 #"; double check if this set works"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #") "
0 0 14 3 1 #"z"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 16 #"set-node-parent!"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 14 #"rb-transplant!"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           )"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 14 #"rb-transplant!"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 14 #"set-node-left!"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 16 #"set-node-parent!"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #") "
0 0 14 3 1 #"y"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 15 #"set-node-color!"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-color"
0 0 26 3 1 #" "
0 0 14 3 1 #"z"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ]"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      )"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 26 3 1 #" "
0 0 14 3 16 #"y-original-color"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"black"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 16 #"rb-delete-fixup!"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"void"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    ))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 14 #";;; Procedure:"
0 0 26 29 1 #"\n"
0 0 18 3 18 #";;;   left-rotate!"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;; Parameters:"
0 0 26 29 1 #"\n"
0 0 18 3 50 #";;;   Tree, a tree (representing a red-black tree)"
0 0 26 29 1 #"\n"
0 0 18 3 65
#";;;   x, a node (representing the node in the tree to be rotated)"
0 0 26 29 1 #"\n"
0 0 18 3 12 #";;; Purpose:"
0 0 26 29 1 #"\n"
0 0 18 3 62
#";;;   Performs a left rotation on the node, x in a binary tree"
0 0 26 29 1 #"\n"
0 0 18 3 13 #";;; Produces:"
0 0 26 29 1 #"\n"
0 0 18 3 46 #";;;   [None]. Causes a side-effect on the tree"
0 0 26 29 1 #"\n"
0 0 18 3 18 #";;; Preconditions:"
0 0 26 29 1 #"\n"
0 0 18 3 36 #";;;   The right node of x is not nil"
0 0 26 29 1 #"\n"
0 0 18 3 43 #";;;   The parent of the root of Tree is nil"
0 0 26 29 1 #"\n"
0 0 18 3 19 #";;; Postconditions:"
0 0 26 29 1 #"\n"
0 0 18 3 72
(8
 #";;;   All nodes originally in the tree remain in the tree after rota"
 #"tion"
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 55 #"; CAN WE HAVE A TREE WITH JUST ONE ELEMENT BE ROTATED??"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 12 #"left-rotate!"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"Tree"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 18 3 2 #";("
0 0 18 3 6 #"define"
0 0 18 3 1 #" "
0 0 18 3 1 #"T"
0 0 18 3 2 #" ("
0 0 18 3 9 #"tree-root"
0 0 18 3 1 #" "
0 0 18 3 7 #"Tree)) "
0 0 18 3 34 #"; Gets the node at the tree's root"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 1 #"T"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 9 #"tree-root"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 4 #"))) "
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 1 #"x"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 6 #"y is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 6 #"before"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 5 #"right"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"x"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 2 #"  "
0 0 14 3 1 #"x"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 15 #"set-node-right!"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 5 #"after"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 5 #"right"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"x"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 4 #"nil?"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 8 #"Entering"
0 0 20 3 1 #" "
0 0 20 3 4 #"Cond"
0 0 20 3 8 #" Initial"
0 0 20 3 1 #"\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 6 #"before"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 6 #"parent"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 4 #"left"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"y"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 16 #"set-node-parent!"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #") "
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 5 #"after"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 6 #"parent"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 4 #"left"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"y"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ]"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 23 3 2 #"#f"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      )"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"       "
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 6 #"before"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 6 #"parent"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"y"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 16 #"set-node-parent!"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 5 #"after"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 6 #"parent"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"y"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 4 #"nil?"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 8 #"Entering"
0 0 20 3 1 #" "
0 0 20 3 4 #"Cond"
0 0 20 3 2 #" 1"
0 0 20 3 1 #"\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"       "
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 6 #"before"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 1 #"T"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 9 #"tree-root"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 14 #"set-tree-root!"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 5 #"after"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 1 #"T"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 9 #"tree-root"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ]"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #")) "
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 8 #"Entering"
0 0 20 3 1 #" "
0 0 20 3 4 #"cond"
0 0 20 3 2 #" 2"
0 0 20 3 1 #"\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"       "
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 6 #"before"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 4 #"left"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 6 #"parent"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"T"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 2 #" ("
0 0 14 3 9 #"tree-root"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 14 #"set-node-left!"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #") "
0 0 14 3 1 #"y"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 5 #"after"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 4 #"left"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 6 #"parent"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"T"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 2 #" ("
0 0 14 3 9 #"tree-root"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ]"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 8 #"Entering"
0 0 20 3 1 #" "
0 0 20 3 4 #"Cond"
0 0 20 3 2 #" 3"
0 0 20 3 1 #"\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"       "
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 6 #"before"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 5 #"right"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 6 #"parent"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"x"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 15 #"set-node-right!"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #") "
0 0 14 3 1 #"y"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 5 #"after"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 5 #"right"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 6 #"parent"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"x"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"       ])"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 3 #"Out"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 5 #" Cond"
0 0 20 3 1 #"\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 6 #"before"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 4 #"left"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"y"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 14 #"set-node-left!"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 5 #"after"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 4 #"left"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"y"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 6 #"before"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 6 #"parent"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"x"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 16 #"set-node-parent!"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 5 #"after"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 6 #"parent"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"x"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    ))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 14 #";;; Procedure:"
0 0 26 29 1 #"\n"
0 0 18 3 19 #";;;   right-rotate!"
0 0 26 29 1 #"\n"
0 0 18 3 15 #";;; Parameters:"
0 0 26 29 1 #"\n"
0 0 18 3 50 #";;;   Tree, a tree (representing a red-black tree)"
0 0 26 29 1 #"\n"
0 0 18 3 65
#";;;   x, a node (representing the node in the tree to be rotated)"
0 0 26 29 1 #"\n"
0 0 18 3 12 #";;; Purpose:"
0 0 26 29 1 #"\n"
0 0 18 3 63
#";;;   Performs a right rotation on the node, x in a binary tree"
0 0 26 29 1 #"\n"
0 0 18 3 13 #";;; Produces:"
0 0 26 29 1 #"\n"
0 0 18 3 46 #";;;   [None]. Causes a side-effect on the tree"
0 0 26 29 1 #"\n"
0 0 18 3 18 #";;; Preconditions:"
0 0 26 29 1 #"\n"
0 0 18 3 35 #";;;   The left node of x is not nil"
0 0 26 29 1 #"\n"
0 0 18 3 43 #";;;   The parent of the root of Tree is nil"
0 0 26 29 1 #"\n"
0 0 18 3 19 #";;; Postconditions:"
0 0 26 29 1 #"\n"
0 0 18 3 72 8 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 13 #"right-rotate!"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"Tree"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 1 #"T"
0 0 26 3 2 #" ("
0 0 14 3 9 #"tree-root"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 3 #")) "
0 0 18 3 34 #"; Gets the node at the tree's root"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 1 #"T"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 1 #" "
0 0 14 3 1 #"T"
0 0 26 3 3 #")) "
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 1 #"x"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 1 #"y"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 6 #"before"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 4 #"left"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"x"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 2 #"  "
0 0 14 3 1 #"x"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 14 #"set-node-left!"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 5 #"after"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 4 #"left"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"x"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 4 #"nil?"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 8 #"Entering"
0 0 20 3 1 #" "
0 0 20 3 4 #"Cond"
0 0 20 3 8 #" Initial"
0 0 20 3 1 #"\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 6 #"before"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 6 #"parent"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 5 #"right"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"y"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 16 #"set-node-parent!"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #") "
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 5 #"after"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 6 #"parent"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 5 #"right"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"y"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ]"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 23 3 2 #"#f"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      )"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"       "
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 6 #"before"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 6 #"parent"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"y"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 16 #"set-node-parent!"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 5 #"after"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 6 #"parent"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"y"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 4 #"nil?"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 8 #"Entering"
0 0 20 3 1 #" "
0 0 20 3 4 #"Cond"
0 0 20 3 2 #" 1"
0 0 20 3 1 #"\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"       "
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 6 #"before"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 1 #"T"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 1 #" "
0 0 14 3 1 #"T"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 14 #"set-tree-root!"
0 0 26 3 1 #" "
0 0 14 3 4 #"Tree"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 5 #"after"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 1 #"T"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 1 #" "
0 0 14 3 1 #"T"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ]"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 6 #"equal?"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #")) "
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 8 #"Entering"
0 0 20 3 1 #" "
0 0 20 3 4 #"cond"
0 0 20 3 2 #" 2"
0 0 20 3 1 #"\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"       "
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 6 #"before"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 5 #"right"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 6 #"parent"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"T"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"T"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 15 #"set-node-right!"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #") "
0 0 14 3 1 #"y"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 5 #"after"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 5 #"right"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 6 #"parent"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"T"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"T"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ]"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 8 #"Entering"
0 0 20 3 1 #" "
0 0 20 3 4 #"Cond"
0 0 20 3 2 #" 3"
0 0 20 3 1 #"\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"       "
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 6 #"before"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 4 #"left"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 6 #"parent"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"x"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 14 #"set-node-left!"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #") "
0 0 14 3 1 #"y"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 5 #"after"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 4 #"left"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 6 #"parent"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"x"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 5 #"print"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"       ])"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 3 #"Out"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 5 #" Cond"
0 0 20 3 1 #"\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 6 #"before"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 5 #"right"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"y"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 15 #"set-node-right!"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 5 #"after"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 5 #"right"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"y"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 6 #"before"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 6 #"parent"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"x"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 16 #"set-node-parent!"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 5 #"after"
0 0 20 3 1 #" "
0 0 20 3 3 #"-->"
0 0 20 3 1 #" "
0 0 20 3 6 #"parent"
0 0 20 3 1 #" "
0 0 20 3 2 #"of"
0 0 20 3 1 #" "
0 0 20 3 1 #"x"
0 0 20 3 1 #" "
0 0 20 3 4 #"is: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 2 #" ("
0 0 14 3 11 #"node-parent"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    ))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 5 #"print"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 3 #" (["
0 0 14 3 5 #"label"
0 0 26 3 1 #" "
0 0 20 3 2 #"\"\""
0 0 26 3 3 #"] ["
0 0 14 3 5 #"value"
0 0 26 3 1 #" "
0 0 20 3 2 #"\"\""
0 0 26 3 3 #"] ["
0 0 14 3 6 #"value2"
0 0 26 3 1 #" "
0 0 20 3 2 #"\"\""
0 0 26 3 3 #"] ["
0 0 14 3 6 #"value3"
0 0 26 3 1 #" "
0 0 20 3 2 #"\"\""
0 0 26 3 2 #"])"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 14 3 5 #"label"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 14 3 5 #"value"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 20 3 2 #"\" "
0 0 20 3 1 #"\""
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 14 3 6 #"value2"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 20 3 2 #"\" "
0 0 20 3 1 #"\""
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 14 3 6 #"value3"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 20 3 3 #"\"\\n"
0 0 20 3 1 #"\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"   ))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 9 #"print-one"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 3 #" (["
0 0 14 3 5 #"label"
0 0 26 3 1 #" "
0 0 20 3 2 #"\"\""
0 0 26 3 3 #"] ["
0 0 14 3 5 #"value"
0 0 26 3 1 #" "
0 0 20 3 2 #"\"\""
0 0 26 3 3 #"] ["
0 0 14 3 6 #"value2"
0 0 26 3 1 #" "
0 0 20 3 2 #"\"\""
0 0 26 3 3 #"] ["
0 0 14 3 6 #"value3"
0 0 26 3 1 #" "
0 0 20 3 2 #"\"\""
0 0 26 3 2 #"])"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 14 3 5 #"label"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 14 3 5 #"value"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 14 3 6 #"value2"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    ))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 10 #"print-list"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 3 #"let"
0 0 26 3 1 #" "
0 0 14 3 6 #"kernel"
0 0 26 3 3 #" (["
0 0 14 3 7 #"current"
0 0 26 3 1 #" "
0 0 14 3 3 #"lst"
0 0 26 3 2 #"])"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 7 #"current"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 7 #"display"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 7 #"current"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           ("
0 0 14 3 7 #"display"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 7 #"current"
0 0 26 3 3 #") ("
0 0 14 3 6 #"kernel"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 7 #"current"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"           )"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"   "
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"   "
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    )"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"   ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 20 3 3 #"\"\\n"
0 0 20 3 1 #"\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"   ))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 21 #"rb-check-equal-trees?"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"tree1"
0 0 26 3 1 #" "
0 0 14 3 5 #"tree2"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 2 #"t1"
0 0 26 3 2 #" ("
0 0 14 3 9 #"tree-root"
0 0 26 3 1 #" "
0 0 14 3 5 #"tree1"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 2 #"t2"
0 0 26 3 2 #" ("
0 0 14 3 9 #"tree-root"
0 0 26 3 1 #" "
0 0 14 3 5 #"tree2"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 5 #"level"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 11 #"trees-equal"
0 0 26 3 1 #" "
0 0 23 3 2 #"#t"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 3 #"let"
0 0 26 3 1 #" "
0 0 14 3 6 #"kernel"
0 0 26 3 3 #" (["
0 0 14 3 5 #"nodeA"
0 0 26 3 1 #" "
0 0 14 3 2 #"t1"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 18 #"                 ["
0 0 14 3 5 #"nodeB"
0 0 26 3 1 #" "
0 0 14 3 2 #"t2"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 18 #"                 ["
0 0 14 3 5 #"level"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #"])"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 9 #"print-one"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 7 #"Level: "
0 0 20 3 1 #"\""
0 0 26 3 1 #" "
0 0 14 3 5 #"level"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 9 #"print-one"
0 0 26 3 1 #" "
0 0 20 3 4 #"\" |\""
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 9 #"print-one"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 1 #" "
0 0 20 3 7 #"NodeA: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 1 #" "
0 0 14 3 5 #"nodeA"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 9 #"print-one"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 1 #" "
0 0 20 3 9 #"ColorA: \""
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-color"
0 0 26 3 1 #" "
0 0 14 3 5 #"nodeA"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 9 #"print-one"
0 0 26 3 1 #" "
0 0 20 3 4 #"\" |\""
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 9 #"print-one"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 1 #" "
0 0 20 3 4 #"Node"
0 0 20 3 1 #" "
0 0 20 3 3 #"B: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 1 #" "
0 0 14 3 5 #"nodeB"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 9 #"print-one"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 1 #" "
0 0 20 3 8 #"ColorB: "
0 0 20 3 1 #"\""
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-color"
0 0 26 3 1 #" "
0 0 14 3 5 #"nodeB"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 3 #"\\n\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"   "
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 26 3 2 #" ("
0 0 14 3 8 #"node-val"
0 0 26 3 1 #" "
0 0 14 3 5 #"nodeA"
0 0 26 3 3 #") ("
0 0 14 3 8 #"node-val"
0 0 26 3 1 #" "
0 0 14 3 5 #"nodeB"
0 0 26 3 5 #"))) ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 11 #"trees-equal"
0 0 26 3 1 #" "
0 0 23 3 2 #"#f"
0 0 26 3 2 #") "
0 0 23 3 2 #"#f"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 4 #"nil?"
0 0 26 3 1 #" "
0 0 14 3 5 #"nodeA"
0 0 26 3 3 #") ("
0 0 14 3 4 #"nil?"
0 0 26 3 1 #" "
0 0 14 3 5 #"nodeB"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"       "
0 0 23 3 1 #"0"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ]"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 4 #"nil?"
0 0 26 3 1 #" "
0 0 14 3 5 #"nodeA"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 6 #"kernel"
0 0 26 3 1 #" "
0 0 14 3 5 #"nodeA"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 5 #"nodeB"
0 0 26 3 3 #") ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 5 #"level"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 6 #"kernel"
0 0 26 3 1 #" "
0 0 14 3 5 #"nodeA"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 5 #"nodeB"
0 0 26 3 3 #") ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 5 #"level"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ]"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      [("
0 0 14 3 4 #"nil?"
0 0 26 3 1 #" "
0 0 14 3 5 #"nodeB"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 6 #"kernel"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 5 #"nodeA"
0 0 26 3 2 #") "
0 0 14 3 5 #"nodeB"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 5 #"level"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 6 #"kernel"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 5 #"nodeA"
0 0 26 3 2 #") "
0 0 14 3 5 #"nodeB"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 5 #"level"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ]"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 6 #"kernel"
0 0 26 3 2 #" ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 5 #"nodeA"
0 0 26 3 3 #") ("
0 0 14 3 9 #"node-left"
0 0 26 3 1 #" "
0 0 14 3 5 #"nodeB"
0 0 26 3 3 #") ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 5 #"level"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 6 #"kernel"
0 0 26 3 2 #" ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 5 #"nodeA"
0 0 26 3 3 #") ("
0 0 14 3 10 #"node-right"
0 0 26 3 1 #" "
0 0 14 3 5 #"nodeB"
0 0 26 3 3 #") ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 5 #"level"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ]"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      )"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      )"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"print"
0 0 26 3 1 #" "
0 0 20 3 16 #"\"Trees Equal? :\""
0 0 26 3 1 #" "
0 0 14 3 11 #"trees-equal"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 14 3 11 #"trees-equal"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    ))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 70 7 0 0 26 29 1 #"\n"
0 0 18 3 25 #"; |    Testing          |"
0 0 26 29 1 #"\n"
0 0 18 3 25 #"; +---------------------+"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 47 #"; Include here any code that will not be graded"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0           0
